<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prapanch Nair</title>
    <link>http://prapanchnair.github.io/home/</link>
    <description>Recent content on Prapanch Nair</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Apr 2017 08:54:37 +0200</lastBuildDate>
    <atom:link href="http://prapanchnair.github.io/home/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>singlepage</title>
      <link>http://prapanchnair.github.io/home/singlepage/</link>
      <pubDate>Sun, 16 Apr 2017 08:54:37 +0200</pubDate>
      
      <guid>http://prapanchnair.github.io/home/singlepage/</guid>
      <description>&lt;p&gt;Hello world&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>secularism</title>
      <link>http://prapanchnair.github.io/home/philosophy/secularism/</link>
      <pubDate>Sun, 16 Apr 2017 08:45:39 +0200</pubDate>
      
      <guid>http://prapanchnair.github.io/home/philosophy/secularism/</guid>
      <description>&lt;p&gt;Religious secularism has become an intensely debated idea all over the world today.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding something</title>
      <link>http://prapanchnair.github.io/home/hacking/understanding/</link>
      <pubDate>Sun, 24 Jul 2016 19:38:30 +0200</pubDate>
      
      <guid>http://prapanchnair.github.io/home/hacking/understanding/</guid>
      <description>&lt;p&gt;In research as a career it is becoming progressively difficult to find ones place in the ramifications of knowledge. Knowledge in any major science now stands as a giant tree with countless branches. No one person has a grand narrative. We are all perched randomly, sometimes even on the weakest of branches and no one person seems to have the grand narrative for it all.&lt;/p&gt;

&lt;p&gt;In the near future, I can only imagine that this tree will ramify exponentially. As I think about this expansion of knowledge,&lt;/p&gt;

&lt;p&gt;that one can reach successfully venture through these branches of the tree of knowledge to finally contribute at the tip of a branch, is by
taking the parent branches for granted.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding something</title>
      <link>http://prapanchnair.github.io/home/blog/2016/07/24/understanding-something/</link>
      <pubDate>Sun, 24 Jul 2016 19:38:30 +0200</pubDate>
      
      <guid>http://prapanchnair.github.io/home/blog/2016/07/24/understanding-something/</guid>
      <description>&lt;p&gt;In research as a career it is becoming progressively difficult to find ones place in the ramifications of knowledge. Knowledge in any major science now stands as a giant tree with countless branches. No one person has a grand narrative. We are all perched randomly, sometimes even on the weakest of branches and no one person seems to have the grand narrative for it all.&lt;/p&gt;

&lt;p&gt;In the near future, I can only imagine that this tree will ramify exponentially. As I think about this expansion of knowledge,&lt;/p&gt;

&lt;p&gt;that one can reach successfully venture through these branches of the tree of knowledge to finally contribute at the tip of a branch, is by
taking the parent branches for granted.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Production and Development set-up for Angular 2 with TypeScript using Webpack and Gulp</title>
      <link>http://prapanchnair.github.io/home/hacking/angular-setup/</link>
      <pubDate>Tue, 22 Dec 2015 13:35:54 +0530</pubDate>
      
      <guid>http://prapanchnair.github.io/home/hacking/angular-setup/</guid>
      <description>

&lt;p&gt;Building modular, better structured web applications is now easier with Angular 2, but this comes with a new set of challenges on developing, packaging and deploying these applications. When developing in typescript, it has to be transpiled to javascript in a way such that its modules can be loaded by the browser. For debugging, source maps need to be enabled and for production, javascript needs to be minified. Along with this, the HTML and CSS of each individual component in the application should be present at the right place. There are different choices available for each of the step and there is no fixed way to do anything.&lt;/p&gt;

&lt;p&gt;All this can get very confusing when trying to start a new angular project. I explored various solutions and found the following set up using webpack to bundle javascript, gulp for running tasks, npm for package management to be the best. The full code for this setup is present at [&lt;a href=&#34;https://github.com/shivanshuag/angular2-seed&#34;&gt;https://github.com/shivanshuag/angular2-seed&lt;/a&gt;] . This setup is built upon the &lt;a href=&#34;https://github.com/angular/angular2-seed&#34;&gt;angular2-seed&lt;/a&gt; app.&lt;/p&gt;

&lt;h2 id=&#34;directory-structure:91f302deb060a036b41938a0215c3017&#34;&gt;Directory Structure&lt;/h2&gt;

&lt;p&gt;This is the directory structure I have. &lt;code&gt;app.ts&lt;/code&gt; bootstraps the angular app. &lt;code&gt;app/seed-app.ts&lt;/code&gt; has the main app component. Other components are inside the components directory with a separate directory for each component which contains its &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;css&lt;/code&gt; files along with the typescript file. &lt;code&gt;vendor.ts&lt;/code&gt; imports all the third-party library the the app uses, which includes angular 2 in this case.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;maya
├── CONTRIBUTE.md
├── gulpfile.js
├── maya.conf.nginx
├── node_modules
├── package.json
├── README.md
├── tsconfig.json
├── webpack.config.js
└── src
    ├── app
    │   ├── components
    │   │   ├── about
    │   │   │   ├── about.css
    │   │   │   ├── about.html
    │   │   │   └── about.ts
    │   │   ├── home
    │   │   │    ├── home.css
    │   │   │    ├── home.html
    │   │   │    └── home.ts
    │   │   │
    │   │   
    │   ├── seed-app.html
    │   ├── seed-app.ts
    │   └── services
    │       └── service.ts
    ├── app.ts
    ├── favicon.ico
    ├── index.html
    └── vendor.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-packages:91f302deb060a036b41938a0215c3017&#34;&gt;Installing Packages&lt;/h2&gt;

&lt;p&gt;NPM is used for package mamagement. &lt;a href=&#34;https://github.com/shivanshuag/angular2-seed/blob/master/package.json&#34;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; contains all the required packages which include angular 2 and its dependecies, webpack , gulp, typescript etc.&lt;/p&gt;

&lt;h2 id=&#34;typescript-and-webpack:91f302deb060a036b41938a0215c3017&#34;&gt;Typescript and Webpack&lt;/h2&gt;

&lt;p&gt;Typescript compiler configuration is present in &lt;code&gt;tsconfig.json&lt;/code&gt;. It has &lt;code&gt;source maps&lt;/code&gt; enabled which helps in debugging. Webpack configuration is present in &lt;code&gt;webpack.config.json&lt;/code&gt;. It bundles all the third-party dependencies import in &lt;code&gt;vendor.ts&lt;/code&gt; into a file &lt;code&gt;vendor.bundle.js&lt;/code&gt;. All other code is bundles into a files named &lt;code&gt;bundle.js&lt;/code&gt;. &lt;code&gt;index.html&lt;/code&gt; just imports these two files.&lt;/p&gt;

&lt;p&gt;For debugging, source maps are enabled in the bundles created for the development mode using gulp.&lt;/p&gt;

&lt;h2 id=&#34;gulp-tasks:91f302deb060a036b41938a0215c3017&#34;&gt;Gulp Tasks&lt;/h2&gt;

&lt;p&gt;For the application to work, along with the transpiled javascript, the html and css files for each of the components should be placed at the path given as the &lt;code&gt;templateUrl&lt;/code&gt; or &lt;code&gt;styleUrl&lt;/code&gt; in the typescript file for the component. Gulp tasks are defined in &lt;code&gt;gulpfile.js&lt;/code&gt; for these things, and for running webpack.&lt;/p&gt;

&lt;p&gt;To create production package of the application, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;❯ gulp deploy

# This will create minified javascript bundles and copy all the html, css file in the &#39;dist&#39; directory.
# This directory can then be served by a web server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create development package of the application, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;❯ gulp dev

# This will create javascript bundles with source maps and copy html, css file in the &#39;dist&#39; directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run webpack-dev-server which serves the app for development purposes and supports live-reload, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;❯ gulp dev-server

# Starts webpack-dev-server at port 8080 serving the app
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;issues:91f302deb060a036b41938a0215c3017&#34;&gt;Issues&lt;/h2&gt;

&lt;p&gt;Currently, all the CSS and HTML files of the application are served separately, there is no way to bundle them in a single file. This was possible in Angularjs as there were no components, and whole CSS of the app could be placed in a single file. In angular 2, doing this can cause css selector conflicts. For HTML in Angularjs, there was template-cache, which could pick all the templates from a single html file.&lt;/p&gt;

&lt;p&gt;Angular Dart had components, but it also had &lt;a href=&#34;https://github.com/angular/angular.dart/wiki/CSS-Shim&#34;&gt;transformers&lt;/a&gt; which namespaced the CSS selectors according to components and also transformed the url of css files in each component. For html, it had template-cache.&lt;/p&gt;

&lt;p&gt;Still waiting for angular2-templatecache and transformers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://prapanchnair.github.io/home/about/</link>
      <pubDate>Fri, 07 Aug 2015 11:14:25 +0000</pubDate>
      
      <guid>http://prapanchnair.github.io/home/about/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://prapanchnair.github.io/home/media/prapanch.jpg&#34; alt=&#34;This is an image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I Research and develop numerical methods for solving multiphase fluid flows involving interfaces of different kinds. I have authored a C code that uses the Smoothed Particle Hydrodynamics. I like to think out loud about life and work and Iam constantly seeking understanding of all this. I am putting it out here to find like minded people.  &lt;br&gt;
&lt;strong&gt;prapanch[dot]nair[at]gmail[dot]com&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Beg</title>
      <link>http://prapanchnair.github.io/home/blog/2015/01/10/about-beg/</link>
      <pubDate>Sat, 10 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://prapanchnair.github.io/home/blog/2015/01/10/about-beg/</guid>
      <description>

&lt;p&gt;Beg is a double-column theme for &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/kAworu/octostrap3&#34;&gt;kAworu/octostrap3&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;features:33aa6c1cc1b431231d6c5fbeeebf5cd4&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Google Analytics&lt;/li&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;li&gt;SNS Links(Facebook, Twitter, GitHub)&lt;/li&gt;
&lt;li&gt;Share Button&lt;/li&gt;
&lt;li&gt;Tagging&lt;/li&gt;
&lt;li&gt;Related Post&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;installation:33aa6c1cc1b431231d6c5fbeeebf5cd4&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;Referred from &lt;a href=&#34;https://github.com/spf13/hugoThemes#installing-themes&#34;&gt;hugoThemes#Installing Themes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installing-with-other-all-themes:33aa6c1cc1b431231d6c5fbeeebf5cd4&#34;&gt;Installing with other all themes&lt;/h2&gt;

&lt;p&gt;If you would like to install all of the available hugo themes, simply clone the entire repository from within your working directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recursive https://github.com/spf13/hugoThemes.git themes
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-a-single-theme:33aa6c1cc1b431231d6c5fbeeebf5cd4&#34;&gt;Installing a single theme&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir themes
cd themes
git clone https://github.com/dim0627/hugo_theme_beg beg
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-with-beg:33aa6c1cc1b431231d6c5fbeeebf5cd4&#34;&gt;Build with Beg&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo server -t beg
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configuration:33aa6c1cc1b431231d6c5fbeeebf5cd4&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;config.yaml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;BaseUrl: &amp;quot;http://yet.unresolved.xyz&amp;quot;
LanguageCode: &amp;quot;en-us&amp;quot;
Title: &amp;quot;Beg&amp;quot;

Params:
  Author: &amp;quot;Daisuke Tsuji&amp;quot;
  DateForm: &amp;quot;Mon, Jan 2, 2006&amp;quot;
  GoogleAnalyticsUserID: &amp;quot;UA-55005303-5&amp;quot;
  Facebook: &amp;quot;daisuke.tsuji.735&amp;quot;
  Twitter: &amp;quot;dim0627&amp;quot;
  Github: &amp;quot;dim0627&amp;quot;
  ShowRelatedPost: True
  Disqus: &amp;quot;unresolved&amp;quot;
  SyntaxHighlightTheme: &amp;quot;github.min.css&amp;quot;

Indexes:
  tag: &amp;quot;tags&amp;quot;

permalinks:
  post: /blog/:year/:month/:day/:slug/

MetadataFormat: &amp;quot;yaml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example : &lt;a href=&#34;https://github.com/dim0627/hugo_theme_beg/blob/source/config.yaml&#34;&gt;My config.yaml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;example post&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;Post title here&amp;quot;
date: 2014-09-17
comments: true
tags: [gitHub, octopress, jekyll]
---

Contents here
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;contact-us:33aa6c1cc1b431231d6c5fbeeebf5cd4&#34;&gt;Contact us&lt;/h1&gt;

&lt;p&gt;Please mail to &lt;code&gt;dim0627@gmail.com&lt;/code&gt; or SNS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/daisuke.tsuji.735&#34;&gt;https://www.facebook.com/daisuke.tsuji.735&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/dim0627&#34;&gt;https://twitter.com/dim0627&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>http://prapanchnair.github.io/home/blog/2014/04/02/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://prapanchnair.github.io/home/blog/2014/04/02/hugo-template-primer/</guid>
      <description>

&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&amp;gt;&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p&gt;

&lt;p&gt;This document is a brief primer on using go templates. The &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;
provide more details.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-go-templates:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Introduction to Go Templates&lt;/h2&gt;

&lt;p&gt;Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that go templates parse very quickly.&lt;/p&gt;

&lt;p&gt;A unique characteristic of go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;Go lang templates are html files with the addition of variables and
functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go variables and functions are accessible within {{ }}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ foo }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parameters are separated using spaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calling the add function with input of 1, 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Methods and fields are accessed via dot notation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.bar }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parentheses can be used to group items together&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Each go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href=&#34;http://prapanchnair.github.io/home/layout/variables&#34;&gt;variables&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;A variable is accessed by referencing the variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables can also be defined and referenced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Go template ship with a few functions which provide basic functionality. The go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href=&#34;http://prapanchnair.github.io/home/layout/functions&#34;&gt;Hugo template
functions&lt;/a&gt; provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;includes:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Includes&lt;/h2&gt;

&lt;p&gt;When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logic:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Logic&lt;/h2&gt;

&lt;p&gt;Go templates provide the most basic iteration and conditional logic.&lt;/p&gt;

&lt;h3 id=&#34;iteration:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Iteration&lt;/h3&gt;

&lt;p&gt;Just like in go, the go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1: Using Context&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }} 
    {{ . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $element := array}} 
    {{ $element }} 
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring key and value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
    {{ $index }} 
    {{ $element }} 
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conditionals:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Conditionals&lt;/h3&gt;

&lt;p&gt;If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go Templates treat the following values as false:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;any array, slice, map, or string of length zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 1: If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: If -&amp;gt; Else&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }} 
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 3: And &amp;amp; Or&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 4: With&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent.&lt;/p&gt;

&lt;p&gt;The first example above could be simplified as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 5: If -&amp;gt; Else If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }} 
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pipes:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Pipes&lt;/h2&gt;

&lt;p&gt;One of the most powerful components of go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p&gt;

&lt;p&gt;Because of the very simple syntax of go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p&gt;

&lt;p&gt;A few simple examples should help convey how to use the pipe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is the same as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 3 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Could be rewritten as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{  isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here 
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;context-aka-the-dot:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Context (aka. the dot)&lt;/h2&gt;

&lt;p&gt;The most easily overlooked concept to understand about go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p&gt;

&lt;h1 id=&#34;hugo-parameters:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Hugo Parameters&lt;/h1&gt;

&lt;p&gt;Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p&gt;

&lt;h2 id=&#34;using-content-page-parameters:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Using Content (page) Parameters&lt;/h2&gt;

&lt;p&gt;In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href=&#34;http://prapanchnair.github.io/home/content/front-matter&#34;&gt;front matter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p&gt;

&lt;p&gt;Here is the example front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
  - &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the corresponding code inside of the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-site-config-parameters:4d30d99f79bd431d57546bbed04b7347&#34;&gt;Using Site (config) Parameters&lt;/h2&gt;

&lt;p&gt;In your top-level configuration file (eg, &lt;code&gt;config.yaml&lt;/code&gt;) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p&gt;

&lt;p&gt;For instance, you might declare:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:
  CopyrightHTML: &amp;quot;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;quot;
  TwitterUser: &amp;quot;spf13&amp;quot;
  SidebarRecentLimit: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within a footer layout, you might then declare a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; which is only
provided if the &lt;code&gt;CopyrightHTML&lt;/code&gt; parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
 alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>http://prapanchnair.github.io/home/blog/2014/04/02/getting-started-with-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://prapanchnair.github.io/home/blog/2014/04/02/getting-started-with-hugo/</guid>
      <description>

&lt;h2 id=&#34;step-1-install-hugo:c57cc0038c788519b441e0331c8bebc7&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;

&lt;p&gt;Goto &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo releases&lt;/a&gt; and download the
appropriate version for your os and architecture.&lt;/p&gt;

&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;

&lt;p&gt;More complete instructions are available at &lt;a href=&#34;http://prapanchnair.github.io/home/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-2-build-the-docs:c57cc0038c788519b441e0331c8bebc7&#34;&gt;Step 2. Build the Docs&lt;/h2&gt;

&lt;p&gt;Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p&gt;

&lt;p&gt;Follow the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href=&#34;http://github.com/spf13/hugo&#34;&gt;hugo repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go into the repo&lt;/li&gt;
&lt;li&gt;Run hugo in server mode and build the docs&lt;/li&gt;
&lt;li&gt;Open your browser to &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Corresponding pseudo commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;rsquo;ve gotten here, follow along the rest of this page on your local build.&lt;/p&gt;

&lt;h2 id=&#34;step-3-change-the-docs-site:c57cc0038c788519b441e0331c8bebc7&#34;&gt;Step 3. Change the docs site&lt;/h2&gt;

&lt;p&gt;Stop the Hugo process by hitting ctrl+c.&lt;/p&gt;

&lt;p&gt;Now we are going to run hugo again, but this time with hugo in watch mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your &lt;a href=&#34;http://vim.spf13.com&#34;&gt;favorite editor&lt;/a&gt; and change one of the source
content pages. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Content files are found in &lt;code&gt;docs/content/&lt;/code&gt;. Unless otherwise specified, files
are located at the same relative location as the url, in our case
&lt;code&gt;docs/content/overview/quickstart.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Change and save this file.. Notice what happened in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; Change detected, rebuilding site

&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refresh the browser and observe that the typo is now fixed.&lt;/p&gt;

&lt;p&gt;Notice how quick that was. Try to refresh the site before it&amp;rsquo;s finished building.. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&lt;/p&gt;

&lt;h2 id=&#34;step-4-have-fun:c57cc0038c788519b441e0331c8bebc7&#34;&gt;Step 4. Have fun&lt;/h2&gt;

&lt;p&gt;The best way to learn something is to play with it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>